<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AKS Deployment Impact Predictor</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .card h2 {
            color: #4a5568;
            margin-bottom: 20px;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .metric {
            text-align: center;
            padding: 15px;
            background: rgba(247, 250, 252, 0.8);
            border-radius: 10px;
            border-left: 4px solid #3b82f6;
        }
        
        .metric-label {
            font-size: 0.8rem;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }
        
        .metric-value {
            font-size: 1.8rem;
            font-weight: bold;
            color: #1e293b;
        }
        
        .metric-unit {
            font-size: 0.9rem;
            color: #64748b;
        }
        
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
        }
        
        .btn-secondary {
            background: #e2e8f0;
            color: #475569;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .chart-container {
            position: relative;
            height: 250px;
            margin-top: 20px;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            color: #64748b;
        }
        
        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #e2e8f0;
            border-top: 2px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .error {
            background: linear-gradient(135deg, #fef2f2, #fee2e2);
            border: 1px solid #fca5a5;
            color: #dc2626;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }
        
        .success {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
            border: 1px solid #86efac;
            color: #16a34a;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }
        
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .button-group {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔮 AKS Deployment Impact Predictor</h1>
            <p>Predict deployment impact before it happens - Real-time cluster analysis</p>
        </div>
        
        <div class="dashboard-grid">
            <!-- Cluster Status Card -->
            <div class="card">
                <h2>
                    <span class="status-indicator" id="cluster-status"></span>
                    Cluster Status
                </h2>
                <div id="cluster-info">
                    <div class="loading">Loading cluster data...</div>
                </div>
                <div class="chart-container">
                    <canvas id="utilizationChart"></canvas>
                </div>
            </div>
            
            <!-- Controls Card -->
            <div class="card">
                <h2>📊 Controls</h2>
                <div class="button-group">
                    <button class="btn btn-primary" id="refresh-data">Refresh Data</button>
                    <button class="btn btn-secondary" id="test-connection">Test Connection</button>
                </div>
                <div id="status-message" style="margin-top: 15px;"></div>
                <div class="chart-container">
                    <canvas id="historyChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize variables
        let utilizationChart = null;
        let historyChart = null;
        
        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadClusterStatus();
            setupEventListeners();
        });
        
        function initializeCharts() {
            // Utilization Chart
            const utilizationCtx = document.getElementById('utilizationChart').getContext('2d');
            utilizationChart = new Chart(utilizationCtx, {
                type: 'doughnut',
                data: {
                    labels: ['CPU Used', 'CPU Free', 'Memory Used', 'Memory Free'],
                    datasets: [{
                        data: [0, 100, 0, 100],
                        backgroundColor: ['#ef4444', '#e5e7eb', '#3b82f6', '#e5e7eb'],
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { usePointStyle: true, padding: 15 }
                        }
                    }
                }
            });
            
            // History Chart
            const historyCtx = document.getElementById('historyChart').getContext('2d');
            historyChart = new Chart(historyCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'CPU %',
                        data: [],
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        tension: 0.4
                    }, {
                        label: 'Memory %',
                        data: [],
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: { beginAtZero: true, max: 100 },
                        x: { display: false }
                    },
                    plugins: { legend: { position: 'top' } }
                }
            });
        }
        
        function setupEventListeners() {
            document.getElementById('refresh-data').addEventListener('click', loadClusterStatus);
            document.getElementById('test-connection').addEventListener('click', testConnection);
        }
        
        function loadClusterStatus() {
            showLoading('cluster-info');
            
            fetch('/api/cluster/status')
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        showError('cluster-info', data.error);
                        updateConnectionStatus(false);
                    } else {
                        updateClusterInfo(data);
                        updateConnectionStatus(true);
                        addToHistory(data);
                    }
                })
                .catch(error => {
                    showError('cluster-info', 'Failed to load cluster status: ' + error.message);
                    updateConnectionStatus(false);
                });
        }
        
        function updateClusterInfo(data) {
            const container = document.getElementById('cluster-info');
            
            const html = `
                <div class="metrics-grid">
                    <div class="metric">
                        <div class="metric-label">Nodes</div>
                        <div class="metric-value">${data.node_count}</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">CPU Cores</div>
                        <div class="metric-value">${data.total_capacity.cpu_cores}</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Memory</div>
                        <div class="metric-value">${Math.round(data.total_capacity.memory_mb / 1024)}</div>
                        <div class="metric-unit">GB</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">CPU Usage</div>
                        <div class="metric-value">${data.utilization_percentage.cpu}</div>
                        <div class="metric-unit">%</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Memory Usage</div>
                        <div class="metric-value">${data.utilization_percentage.memory}</div>
                        <div class="metric-unit">%</div>
                    </div>
                    <div class="metric">
                        <div class="metric-label">Running Pods</div>
                        <div class="metric-value">${data.current_usage.running_pods}</div>
                    </div>
                </div>
                <div style="margin-top: 15px; padding: 10px; background: rgba(59, 130, 246, 0.1); border-radius: 5px; font-size: 0.9rem;">
                    📊 Metrics ${data.metrics_available ? 'Available' : 'Estimated'} • Updated: ${new Date(data.timestamp).toLocaleTimeString()}
                </div>
            `;
            
            container.innerHTML = html;
            
            // Update utilization chart
            if (utilizationChart) {
                utilizationChart.data.datasets[0].data = [
                    data.utilization_percentage.cpu,
                    100 - data.utilization_percentage.cpu,
                    data.utilization_percentage.memory,
                    100 - data.utilization_percentage.memory
                ];
                utilizationChart.update();
            }
        }
        
        function addToHistory(data) {
            if (!historyChart) return;
            
            const now = new Date().toLocaleTimeString();
            
            // Keep only last 10 data points
            if (historyChart.data.labels.length >= 10) {
                historyChart.data.labels.shift();
                historyChart.data.datasets[0].data.shift();
                historyChart.data.datasets[1].data.shift();
            }
            
            historyChart.data.labels.push(now);
            historyChart.data.datasets[0].data.push(data.utilization_percentage.cpu);
            historyChart.data.datasets[1].data.push(data.utilization_percentage.memory);
            
            historyChart.update('none');
        }
        
        function testConnection() {
            showMessage('Testing connection...', 'info');
            loadClusterStatus();
        }
        
        function showLoading(containerId) {
            const container = document.getElementById(containerId);
            container.innerHTML = '<div class="loading">Loading...</div>';
        }
        
        function showError(containerId, message) {
            const container = document.getElementById(containerId);
            container.innerHTML = `<div class="error">❌ ${message}</div>`;
        }
        
        function showMessage(message, type = 'info') {
            const container = document.getElementById('status-message');
            const className = type === 'error' ? 'error' : type === 'success' ? 'success' : 'info';
            container.innerHTML = `<div class="${className}">${message}</div>`;
            
            setTimeout(() => {
                container.innerHTML = '';
            }, 3000);
        }
        
        function updateConnectionStatus(connected) {
            const indicator = document.getElementById('cluster-status');
            if (connected) {
                indicator.style.background = '#10b981';
                showMessage('✅ Connected to cluster', 'success');
            } else {
                indicator.style.background = '#ef4444';
                showMessage('❌ Connection failed', 'error');
            }
        }
        
        // Auto-refresh every 30 seconds
        setInterval(loadClusterStatus, 30000);
    </script>
</body>
</html>